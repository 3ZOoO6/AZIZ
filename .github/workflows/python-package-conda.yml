python
from flask import Flask, render_template, request, jsonify, session, redirect, url_for
from flask_talisman import Talisman
from flask_limiter import Limiter
from flask_limiter.util import get_remote_address
from flask_login import LoginManager, UserMixin, login_user, logout_user, login_required, current_user
from flask_sqlalchemy import SQLAlchemy
from werkzeug.security import generate_password_hash, check_password_hash
import subprocess
import re
import bleach
import secrets
import datetime
import os
from cryptography.fernet import Fernet

app = Flask(__name__)
app.secret_key = secrets.token_hex(32)

# إعداد قاعدة البيانات
app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///users.db'
app.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False
db = SQLAlchemy(app)

# نموذج المستخدم
class User(UserMixin, db.Model):
    id = db.Column(db.Integer, primary_key=True)
    username = db.Column(db.String(150), nullable=False, unique=True)
    password = db.Column(db.String(150), nullable=False)

# إعداد إدارة تسجيل الدخول
login_manager = LoginManager()
login_manager.login_view = 'login'
login_manager.init_app(app)

@login_manager.user_loader
def load_user(user_id):
    return User.query.get(int(user_id))

# سياسات أمان متقدمة
csp = {
    'default-src': "'self'",
    'script-src': [
        "'self'",
        "'unsafe-inline'",
        'https://cdnjs.cloudflare.com',
    ],
    'style-src': [
        "'self'",
        "'unsafe-inline'",
        'https://stackpath.bootstrapcdn.com',
    ],
    'img-src': [
        "'self'",
        'data:',
    ]
}

Talisman(app, content_security_policy=csp, force_https=True, strict_transport_security=True)

# تحديد الحد الأقصى لعدد الطلبات
limiter = Limiter(
    app=app,
    key_func=get_remote_address,
    default_limits=["500 per hour", "100 per minute", "20 per second"]
)

# قائمة الأوامر المسموح بها
ALLOWED_COMMANDS = {
    'nmap': r'^nmap -sS -Pn (?:[0-9]{1,3}\.){3}[0-9]{1,3}$',
    'ping': r'^ping (?:[0-9]{1,3}\.){3}[0-9]{1,3}$',
    'traceroute': r'^traceroute (?:[0-9]{1,3}\.){3}[0-9]{1,3}$',
    'help': r'^help$',
}

# نظام كشف التسلل (IDS)
class IntrusionDetectionSystem:
    def __init__(self):
        self.patterns = [
            r';|\|\||&&',  # Command injection
            r'(DROP TABLE|INSERT INTO|SELECT \*)',  # SQLi
            r'<script>.*</script>',  # XSS
            r'../'  # Path traversal
        ]
    
    def detect(self, input_str):
        for pattern in self.patterns:
            if re.search(pattern, input_str, re.IGNORECASE):
                return True
        return False

ids = IntrusionDetectionSystem()

@app.route('/')
@limiter.limit("10 per minute")
def index():
    session['user_token'] = secrets.token_urlsafe(16)
    return render_template('index.html')

@app.route('/register', methods=['GET', 'POST'])
def register():
    if request.method == 'POST':
        username = request.form['username']
        password = request.form['password']
        hashed_password = generate_password_hash(password, method='sha256')
        new_user = User(username=username, password=hashed_password)
        db.session.add(new_user)
        db.session.commit()
        return jsonify({'message': 'User registered successfully'})
    return render_template('register.html')

@app.route('/login', methods=['GET', 'POST'])
def login():
    if request.method == 'POST':
        username = request.form['username']
        password = request.form['password']
        user = User.query.filter_by(username=username).first()
        if user and check_password_hash(user.password, password):
            login_user(user)
            return jsonify({'message': 'Logged in successfully'})
        return jsonify({'error': 'Invalid credentials'}), 403
    return render_template('login.html')

@app.route('/logout')
@login_required
def logout():
    logout_user()
    return jsonify({'message': 'Logged out successfully'})

@app.route('/terminal', methods=['POST'])
@limiter.limit("15 per minute")
@login_required
def handle_command():
    user_input = bleach.clean(request.form.get('command', ''))
    
    # التحقق من التوكن لمنع CSRF
    if request.form.get('token') != session.get('user_token'):
        return jsonify({'error': 'Invalid token'}), 403
    
    if ids.detect(user_input):
        log_security_event(request.remote_addr, "Command Injection Attempt", user_input)
        return jsonify({'error': 'Potential security threat detected!'}), 403
    
    # التحقق من الأمر ضد القائمة البيضاء
    allowed = False
    for cmd, pattern in ALLOWED_COMMANDS.items():
        if re.match(pattern, user_input):
            allowed = True
            break
    
    if not allowed:
        log_security_event(request.remote_addr, "Invalid Command Attempt", user_input)
        return jsonify({'error': 'Command not allowed'}), 403
    
    try:
        result = subprocess.run(
            user_input.split(),
            capture_output=True,
            text=True,
            timeout=5,
            shell=False
        )
        output = html.escape(result.stdout + result.stderr)
        return jsonify({'output': output})
    except Exception as e:
        log_security_event(request.remote_addr, "Command Error", str(e))
        return jsonify({'error': str(e)}), 500

def log_security_event(ip, event_type, details):
    timestamp = datetime.datetime.now().isoformat()
    log_entry = f"{timestamp} | {ip} | {event_type} | {details}\n"
    with open('security.log', 'a') as f:
        f.write(log_entry)

# إعداد تشفير AES-256
def generate_key():
    return Fernet.generate_key()

# لتشفير الرسائل
def encrypt_message(message, key):
    f = Fernet(key)
    return f.encrypt(message.encode())

# لفك تشفير الرسائل
def decrypt_message(token, key):
    f = Fernet(key)
    return f.decrypt(token).decode()

@app.route('/chat', methods=['POST'])
def chat():
    message = request.form.get('message', '')
    key = os.environ.get('SECRET_KEY', generate_key())  # استخدام مفتاح سري
    encrypted_message = encrypt_message(message, key)
    # هنا يمكنك إضافة تعليمات لتخزين أو إرسال الرسالة المشفرة
    return jsonify({'encrypted_message': encrypted_message.decode()})

@app.route('/dashboard')
@login_required
def dashboard():
    return render_template('dashboard.html', name=current_user.username)

if __name__ == '__main__':
    app.run(ssl_context=('cert.pem', 'key.pem'), debug=True)
```

### تفاصيل إضافية:
- **نظام إدارة المستخدمين:** تم تضمين نظام تسجيل دخول وتسجيل باستخدام `Flask-Login` و`Flask-SQLAlchemy`، مع تشفير كلمات المرور باستخدام `werkzeug.security`.
- **الأمان:** تم تحسين الأمان باستخدام مكتبات مثل `Flask-Talisman` لتطبيق سياسات أمان متقدمة، بالإضافة إلى `Flask-Limiter` لتحديد معدل الطلبات.
- **المحطة الطرفية:** تم إعداد محطة طرفية آمنة تسمح بإجراء الأوامر المسموح بها فقط كما هو محدد في القائمة البيضاء.
- **التشفير:** تم استخدام مكتبة `cryptography` لتشفير الرسائل وضمان حماية البيانات الحساسة.
- **الواجهة:** يمكن تحسين واجهة المستخدم من خلال استخدام تقنيات مثل `HTML` و`JavaScript` و`CSS` لجعلها أكثر تفاعلية وجاذبية.
